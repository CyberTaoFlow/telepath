/*
 * File: app/view/usersWindow.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.usersWindow', {
    extend: 'Ext.window.Window',

    requires: [
        'Ext.grid.Panel',
        'Ext.grid.column.Number',
        'Ext.grid.View',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.grid.column.Boolean'
    ],

    height: 359,
    id: 'usersWindow',
    width: 1068,
    layout: 'fit',
    closeAction: 'hide',
    title: 'Telepath Users',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'gridpanel',
                    store: 'usersStore',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            width: 50,
                            defaultWidth: 50,
                            dataIndex: 'id',
                            text: 'ID',
                            format: '0'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'login',
                            text: 'Login'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'first_name',
                            text: 'First Name'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'last_name',
                            text: 'Last Name'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'company',
                            text: 'Company'
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 100,
                            dataIndex: 'phone',
                            text: 'Phone'
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 150,
                            dataIndex: 'email',
                            text: 'E-Mail',
                            flex: 1
                        },
                        {
                            xtype: 'booleancolumn',
                            width: 50,
                            dataIndex: 'active',
                            text: 'Active'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return Ext.Date.format(new Date(parseInt(value) * 1000), "d/m/y H:i:s");
                            },
                            width: 120,
                            dataIndex: 'created_on',
                            text: 'Created On'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return Ext.Date.format(new Date(parseInt(value) * 1000), "d/m/y H:i:s");
                            },
                            width: 120,
                            dataIndex: 'last_login',
                            text: 'Last Login'
                        }
                    ],
                    viewConfig: {
                        listeners: {
                            itemclick: {
                                fn: me.onViewItemClick,
                                scope: me
                            }
                        }
                    },
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'button',
                                    text: 'Add User',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onViewItemClick: function(dataview, record, item, index, e, eOpts) {
        telepath.users.edit(record);
    },

    onButtonClick: function(button, e, eOpts) {
        telepath.users.create();
    }

});
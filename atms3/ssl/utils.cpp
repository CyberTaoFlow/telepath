#include <string.h>
#include <stdio.h>
#include <time.h>


static const unsigned char printable[256] = {
  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  /* 00..07    ........ */
  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  /* 08..0f    ........ */
  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  /* 10..17    ........ */
  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  /* 18..1f    ........ */
  0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,  /* 20..27     !"#$%&' */
  0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,  /* 28..2f    ()*+,-./ */
  0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,  /* 30..37    01234567 */
  0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,  /* 38..3f    89:;<=>? */

  0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,  /* 40..47    @ABCDEFG */
  0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,  /* 48..4f    HIJKLMNO */
  0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,  /* 50..57    PQRSTUVW */
  0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,  /* 58..5f    XYZ[\]^_ */
  0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,  /* 60..67    `abcdefg */
  0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,  /* 68..6f    hijklmno */
  0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,  /* 70..77    pqrstuvw */
  0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x20,  /* 78..7f    xyz{|}~. */

  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  /* 80..87    ........ */
  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  /* 88..8f    ........ */
  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  /* 90..97    ........ */
  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  /* 98..9f    ........ */
  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  /* a0..a7    ........ */
  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  /* a8..af    ........ */
  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  /* b0..b7    ........ */
  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  /* b8..bf    ........ */

  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  /* c0..c7    ........ */
  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  /* c8..cf    ........ */
  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  /* d0..d7    ........ */
  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  /* d8..df    ........ */
  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  /* e0..e7    ........ */
  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  /* e8..ef    ........ */
  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  /* f0..f7    ........ */
  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E   /* f8..ff    ........ */
};

static size_t printline(char* rows_buff,const char * start, const unsigned char * data,  size_t max)
{
    size_t j = 0;
    char temp[256];
    memset(temp, ' ', sizeof(temp));
    temp[sizeof(temp)-1] = 0;
    unsigned char b;

    for(j = 0; j < max; j++)
    {
		/*
        b = data[j];
        if (isalnum(b) || b == ' ' || ispunct(b))
            temp[j] = data[j];
        else
            temp[j] = '.';
		*/
		temp[j] = printable[data[j]];
    }

    // print hex
    temp[18] = '|';

    for (j = 0; j < max; j++)
    {
        b = (data[j]>>4); //-V112
        b += ( b > 9) ? 'A'-10 : '0';
        temp[20+j*3] = b;

        b = ((unsigned char)(data[j]<<4)) >>4;
        b += ( b > 9) ? 'A'-10 : '0';
        temp[20+j*3+1] = b;
    }
    temp[19+j*3] = '\n';
    temp[20+j*3] = 0;

    sprintf(rows_buff, "%s%s", start, temp);
	return strlen(rows_buff);

}

void loghex(const unsigned char * data, size_t size)
{
	static char month_str[][4] = { {"Jan"}, {"Feb"}, {"Mar"}, {"Apr"}, {"May"}, {"Jun"}, {"Jul"}, {"Aug"}, {"Sep"}, {"Oct"}, {"Nov"}, {"Dec"}, {""} };
	size_t bytes_to_write = 0;
	char rows_buff[102*1024+1];
	char start[100];
    const char * error = "DEBUG ";
    struct tm _tm;
    struct tm *now=&_tm;
    time_t tval;
    size_t i;
    size_t ord;
	size_t lines;

    if (size == 0)
        return;

    tval = time(NULL);
    //now = MTH_Manager.LocalTime(&tval);
	now = localtime(&tval);

    lines = size / 16;

	sprintf(start,"[%02d/%s/%02d %d:%02d:%02d] %s", now->tm_mday, month_str[now->tm_mon], now->tm_year+1900,now->tm_hour, now->tm_min, now->tm_sec, error );

	for (i = 0; i < lines; i++)
	{
		bytes_to_write += printline(rows_buff+bytes_to_write,(const char*)start, data+i*16, 16);
		if (bytes_to_write +103 > sizeof(rows_buff))
		{
			//flush buffer to disk
		    fwrite(rows_buff,1, bytes_to_write, stdout);
			bytes_to_write = 0;
		}
	}

    ord = size & 0xF;
    // ord(size%16)
    if ( ord > 0)
    {
        bytes_to_write += printline(rows_buff+bytes_to_write,(const char*)start, data+i*16, ord);
    }
    fwrite(rows_buff,1, bytes_to_write, stdout);
    fflush(stdout);
}

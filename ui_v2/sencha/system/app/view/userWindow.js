/*
 * File: app/view/userWindow.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.userWindow', {
    extend: 'Ext.window.Window',

    requires: [
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.form.field.Checkbox',
        'Ext.form.field.Text',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Column',
        'Ext.selection.CheckboxModel',
        'Ext.form.Label'
    ],

    height: 639,
    width: 752,
    layout: 'absolute',
    title: 'User Editor',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            text: 'Save User',
                            listeners: {
                                click: {
                                    fn: me.onButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            id: 'user_delete',
                            text: 'Delete user',
                            listeners: {
                                click: {
                                    fn: me.onUser_deleteClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            id: 'user_activity',
                            text: 'View Activity'
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'checkboxfield',
                    x: 10,
                    y: 10,
                    id: 'user_active',
                    boxLabel: 'Active'
                },
                {
                    xtype: 'textfield',
                    x: 10,
                    y: 40,
                    id: 'user_login',
                    fieldLabel: 'Username'
                },
                {
                    xtype: 'textfield',
                    x: 10,
                    y: 70,
                    id: 'user_email',
                    fieldLabel: 'E-Mail'
                },
                {
                    xtype: 'textfield',
                    x: 10,
                    y: 100,
                    id: 'user_first_name',
                    fieldLabel: 'First Name'
                },
                {
                    xtype: 'textfield',
                    x: 10,
                    y: 130,
                    id: 'user_last_name',
                    fieldLabel: 'Last Name'
                },
                {
                    xtype: 'textfield',
                    x: 10,
                    y: 160,
                    id: 'user_company',
                    fieldLabel: 'Company'
                },
                {
                    xtype: 'textfield',
                    x: 10,
                    y: 190,
                    id: 'user_phone',
                    fieldLabel: 'Phone'
                },
                {
                    xtype: 'gridpanel',
                    x: 260,
                    y: 40,
                    height: 260,
                    id: 'user_groups',
                    width: 230,
                    title: 'Groups',
                    store: 'groupsStore',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'name',
                            text: 'Group',
                            flex: 1
                        }
                    ],
                    selModel: Ext.create('Ext.selection.CheckboxModel', {
                        checkOnly: true
                    })
                },
                {
                    xtype: 'textfield',
                    x: 10,
                    y: 240,
                    id: 'user_password_1',
                    fieldLabel: 'Password',
                    inputType: 'password'
                },
                {
                    xtype: 'textfield',
                    x: 10,
                    y: 270,
                    id: 'user_password_2',
                    fieldLabel: 'Password (again)',
                    inputType: 'password'
                },
                {
                    xtype: 'gridpanel',
                    x: 10,
                    y: 310,
                    height: 260,
                    id: 'user_permissions',
                    width: 480,
                    title: 'Permissions',
                    store: 'permissionsStore',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            width: 70,
                            defaultWidth: 70,
                            dataIndex: 'class',
                            text: 'Scope'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                switch(value) {
                                    case 'get': return 'View'; break;
                                    case 'set': return 'Modify'; break;
                                    case 'add': return 'Create'; break;
                                    case 'del': return 'Delete'; break;
                                }
                            },
                            width: 70,
                            defaultWidth: 70,
                            dataIndex: 'function',
                            text: 'Type'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'description',
                            text: 'Description',
                            flex: 1
                        }
                    ],
                    viewConfig: {
                        disableSelection: false
                    },
                    selModel: Ext.create('Ext.selection.CheckboxModel', {
                        checkOnly: true
                    }),
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'label',
                                    padding: '0 5 0 5',
                                    text: 'Toggle Permissions'
                                },
                                {
                                    xtype: 'button',
                                    id: 'user_toggle_get',
                                    enableToggle: true,
                                    text: 'View',
                                    listeners: {
                                        click: {
                                            fn: me.onUser_toggle_getClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    id: 'user_toggle_set',
                                    enableToggle: true,
                                    text: 'Modify',
                                    listeners: {
                                        click: {
                                            fn: me.onUser_toggle_setClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    id: 'user_toggle_add',
                                    enableToggle: true,
                                    text: 'Create',
                                    listeners: {
                                        click: {
                                            fn: me.onUser_toggle_addClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    id: 'user_toggle_del',
                                    enableToggle: true,
                                    text: 'Delete',
                                    listeners: {
                                        click: {
                                            fn: me.onUser_toggle_delClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'gridpanel',
                    x: 500,
                    y: 40,
                    height: 480,
                    id: 'user_applications',
                    width: 230,
                    title: 'Applications',
                    store: 'applicationsStore',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'domain',
                            text: 'Application',
                            flex: 1
                        }
                    ],
                    selModel: Ext.create('Ext.selection.CheckboxModel', {
                        checkOnly: true
                    })
                },
                {
                    xtype: 'checkboxfield',
                    x: 500,
                    y: 530,
                    disabled: true,
                    height: 40,
                    width: 230,
                    fieldLabel: 'Automatically add to the list applicaitions created by the user',
                    labelSeparator: '&nbsp',
                    labelWidth: 210,
                    checked: true
                },
                {
                    xtype: 'checkboxfield',
                    x: 90,
                    y: 10,
                    id: 'user_mail_reports',
                    fieldLabel: '',
                    boxLabel: 'Subscribe to reports'
                },
                {
                    xtype: 'checkboxfield',
                    x: 250,
                    y: 10,
                    id: 'user_mail_alerts',
                    fieldLabel: '',
                    boxLabel: 'Subscribe to alerts'
                }
            ]
        });

        me.callParent(arguments);
    },

    onButtonClick: function(button, e, eOpts) {
        telepath.users.save();
    },

    onUser_deleteClick: function(button, e, eOpts) {
        telepath.users.deleteClick();
    },

    onUser_toggle_getClick: function(button, e, eOpts) {
        telepath.users.toggle('get');
    },

    onUser_toggle_setClick: function(button, e, eOpts) {
        telepath.users.toggle('set');
    },

    onUser_toggle_addClick: function(button, e, eOpts) {
        telepath.users.toggle('add');
    },

    onUser_toggle_delClick: function(button, e, eOpts) {
        telepath.users.toggle('del');
    }

});
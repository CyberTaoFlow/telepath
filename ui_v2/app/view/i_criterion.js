/*
 * File: app/view/i_criterion.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.i_criterion', {
    extend: 'Ext.container.Container',

    requires: [
        'Ext.form.field.ComboBox',
        'Ext.form.field.Number',
        'Ext.Img',
        'Ext.button.Button',
        'Ext.form.Label'
    ],

    height: 48,
    id: 'i_criterion',
    width: 628,
    layout: 'absolute',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'combobox',
                    x: 470,
                    y: 0,
                    id: 'i_andOr',
                    width: 60,
                    fieldLabel: '',
                    value: 'And',
                    editable: false,
                    displayField: 'type',
                    queryMode: 'local',
                    store: 'i_andOrStore',
                    listeners: {
                        change: {
                            fn: me.onI_andOrChange,
                            scope: me
                        },
                        afterrender: {
                            fn: me.onI_andOrAfterRender,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'combobox',
                    x: 10,
                    y: 20,
                    id: 'i_filterAvgTot',
                    width: 113,
                    fieldLabel: '',
                    value: 'Average',
                    editable: false,
                    displayField: 'field',
                    queryMode: 'local',
                    store: 'i_filterscoreTypeStore',
                    listeners: {
                        change: {
                            fn: me.onI_filterAvgTotChange,
                            scope: me
                        },
                        afterrender: {
                            fn: me.onI_filterAvgTotAfterRender,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'combobox',
                    x: 130,
                    y: 20,
                    id: 'i_filterComparator',
                    width: 150,
                    value: 'At Least',
                    editable: false,
                    displayField: 'field',
                    queryMode: 'local',
                    store: 'i_filterComparatorStore',
                    listeners: {
                        change: {
                            fn: me.onI_filterComparatorChange,
                            scope: me
                        },
                        afterrender: {
                            fn: me.onI_filterComparatorAfterRender,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'numberfield',
                    x: 290,
                    y: 20,
                    id: 'i_filterScore',
                    width: 80,
                    fieldLabel: '',
                    value: 70,
                    maxValue: 100,
                    minValue: 0,
                    step: 5,
                    listeners: {
                        change: {
                            fn: me.onI_filterScoreChange,
                            scope: me
                        },
                        afterrender: {
                            fn: me.onI_filterScoreAfterRender,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'image',
                    x: 460,
                    y: 20,
                    height: 20,
                    hidden: true,
                    width: 20,
                    src: 'Htmls/images/close.gif',
                    listeners: {
                        render: {
                            fn: me.onImageRender,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'button',
                    x: 580,
                    y: 20,
                    id: 'i_closeCri',
                    text: 'x',
                    listeners: {
                        click: {
                            fn: me.onButtonClick,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'label',
                    x: 390,
                    y: 22,
                    text: 'Percent'
                }
            ],
            listeners: {
                destroy: {
                    fn: me.onI_criterionDestroy,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onI_andOrChange: function(field, newValue, oldValue, eOpts) {
        updateCriteriaOnHUB();
    },

    onI_andOrAfterRender: function(component, eOpts) {
        updateCriteriaOnHUB();
    },

    onI_filterAvgTotChange: function(field, newValue, oldValue, eOpts) {
        updateCriteriaOnHUB();
    },

    onI_filterAvgTotAfterRender: function(component, eOpts) {
        updateCriteriaOnHUB();
    },

    onI_filterComparatorChange: function(field, newValue, oldValue, eOpts) {
        updateCriteriaOnHUB();
    },

    onI_filterComparatorAfterRender: function(component, eOpts) {
        updateCriteriaOnHUB();
    },

    onI_filterScoreChange: function(field, newValue, oldValue, eOpts) {
        updateCriteriaOnHUB();
    },

    onI_filterScoreAfterRender: function(component, eOpts) {
        updateCriteriaOnHUB();
    },

    onImageRender: function(component, eOpts) {
        component.getEl().addListener(
            'click',
            function(){
                    removeSearchCriterion(component);
            }

        );
    },

    onButtonClick: function(button, e, eOpts) {
            removeSearchCriterion(button);
    },

    onI_criterionDestroy: function(component, eOpts) {
        updateCriteriaOnHUB();
    }

});
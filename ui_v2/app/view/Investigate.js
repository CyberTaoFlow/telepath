/*
 * File: app/view/Investigate.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.Investigate', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.investigate',

    requires: [
        'Ext.form.Label',
        'Ext.form.field.Date',
        'Ext.form.field.Time',
        'Ext.form.field.Number',
        'Ext.button.Button',
        'Ext.form.Panel',
        'Ext.form.field.Checkbox',
        'Ext.grid.property.Grid',
        'Ext.grid.View',
        'Ext.selection.RowModel',
        'Ext.grid.plugin.CellEditing',
        'Ext.grid.column.Number',
        'Ext.selection.CellModel',
        'Ext.toolbar.Toolbar',
        'Ext.toolbar.Separator',
        'Ext.form.field.Display',
        'Ext.form.field.Hidden',
        'Ext.ProgressBar'
    ],

    id: 'investigatePanel',
    layout: 'fit',
    bodyPadding: '',
    title: 'Investigate',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'panel',
                    dock: 'top',
                    height: 390,
                    id: 'i_filterPanel',
                    style: 'backgournd-color:#fff;',
                    layout: 'border',
                    collapsed: false,
                    collapsible: true,
                    hideCollapseTool: true,
                    title: 'Search Suspects Filter',
                    items: [
                        {
                            xtype: 'panel',
                            region: 'center',
                            split: true,
                            id: 'i_searchPanel',
                            layout: 'absolute',
                            items: [
                                {
                                    xtype: 'label',
                                    x: 10,
                                    y: 10,
                                    cls: 'tp-title',
                                    width: 960,
                                    text: 'Search Filters '
                                },
                                {
                                    xtype: 'datefield',
                                    x: 210,
                                    y: 40,
                                    id: 'i_startDate',
                                    width: 150,
                                    fieldLabel: 'From',
                                    labelSeparator: ' ',
                                    labelWidth: 40,
                                    emptyText: 'Choose Date',
                                    editable: false,
                                    format: 'd/m/y',
                                    listeners: {
                                        change: {
                                            fn: me.onI_startDateChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'timefield',
                                    x: 370,
                                    y: 40,
                                    id: 'i_fromHour',
                                    width: 60,
                                    fieldLabel: '',
                                    value: '0:00',
                                    editable: false,
                                    format: 'G:i',
                                    listeners: {
                                        change: {
                                            fn: me.onI_fromHourChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'datefield',
                                    x: 450,
                                    y: 40,
                                    id: 'i_endDate',
                                    width: 150,
                                    fieldLabel: 'To',
                                    labelSeparator: ' ',
                                    labelWidth: 30,
                                    emptyText: 'Choose Date',
                                    editable: false,
                                    format: 'd/m/y',
                                    listeners: {
                                        change: {
                                            fn: me.onI_endDateChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'timefield',
                                    x: 610,
                                    y: 40,
                                    id: 'i_toHour',
                                    width: 60,
                                    fieldLabel: '',
                                    value: '23:59',
                                    editable: false,
                                    format: 'G:i ',
                                    listeners: {
                                        change: {
                                            fn: me.onI_toHourChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'label',
                                    x: 10,
                                    y: 80,
                                    cls: 'tp-title',
                                    width: 660,
                                    text: 'Score'
                                },
                                {
                                    xtype: 'combobox',
                                    x: 10,
                                    y: 120,
                                    id: 'i_filterAvgTot0',
                                    width: 113,
                                    fieldLabel: '',
                                    labelSeparator: ' ',
                                    labelWidth: 70,
                                    value: 'Average',
                                    enableKeyEvents: true,
                                    editable: false,
                                    displayField: 'field',
                                    queryMode: 'local',
                                    store: 'i_filterscoreTypeStore',
                                    valueField: 'field',
                                    listeners: {
                                        change: {
                                            fn: me.onI_filterAvgTotChange,
                                            scope: me
                                        },
                                        keyup: {
                                            fn: me.onI_filterAvgTot0Keyup,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    x: 130,
                                    y: 120,
                                    id: 'i_filterComparator0',
                                    width: 160,
                                    fieldLabel: '',
                                    emptyText: '> , < , <= , >=',
                                    enableKeyEvents: true,
                                    editable: false,
                                    displayField: 'field',
                                    queryMode: 'local',
                                    store: 'i_filterComparatorStore',
                                    valueField: 'field',
                                    listeners: {
                                        change: {
                                            fn: me.onI_filterComparatorChange,
                                            scope: me
                                        },
                                        keyup: {
                                            fn: me.onI_filterComparator0Keyup,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'numberfield',
                                    x: 300,
                                    y: 120,
                                    id: 'i_filterScore0',
                                    width: 80,
                                    fieldLabel: '',
                                    value: 0,
                                    enableKeyEvents: true,
                                    decimalPrecision: 4,
                                    maxValue: 100,
                                    minValue: 0,
                                    step: 5,
                                    listeners: {
                                        change: {
                                            fn: me.onI_filterScoreChange,
                                            scope: me
                                        },
                                        keyup: {
                                            fn: me.onI_filterScore0Keyup,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'label',
                                    x: 390,
                                    y: 120,
                                    text: 'Percent'
                                },
                                {
                                    xtype: 'button',
                                    x: 550,
                                    y: 120,
                                    icon: 'Htmls/images/add.gif',
                                    listeners: {
                                        click: {
                                            fn: me.add_cri_click,
                                            scope: me
                                        },
                                        render: {
                                            fn: me.onButtonRender,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'form',
                                    x: 10,
                                    y: 160,
                                    border: '',
                                    height: 160,
                                    id: 'i_advanced',
                                    width: 970,
                                    layout: 'absolute',
                                    bodyPadding: 10,
                                    collapsed: false,
                                    collapsible: true,
                                    title: 'Advanced',
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            x: 10,
                                            y: 20,
                                            id: 'i_filterUser',
                                            width: 250,
                                            fieldLabel: 'User',
                                            labelSeparator: ' ',
                                            labelWidth: 120,
                                            enableKeyEvents: true,
                                            listeners: {
                                                change: {
                                                    fn: me.onI_filterUserChange,
                                                    scope: me
                                                },
                                                keypress: {
                                                    fn: me.onI_filterUserKeypress,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'textfield',
                                            x: 320,
                                            y: 20,
                                            id: 'i_filterUserAgent',
                                            width: 250,
                                            fieldLabel: 'User-Agent',
                                            labelSeparator: ' ',
                                            labelWidth: 120,
                                            enableKeyEvents: true,
                                            listeners: {
                                                change: {
                                                    fn: me.onI_filterUserAgentChange,
                                                    scope: me
                                                },
                                                keypress: {
                                                    fn: me.onI_filterUserAgentKeypress,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'combobox',
                                            x: 640,
                                            y: 20,
                                            id: 'i_filterPageCriterion',
                                            width: 180,
                                            fieldLabel: 'Page',
                                            labelSeparator: ' ',
                                            value: 'Contains',
                                            enableKeyEvents: true,
                                            editable: false,
                                            displayField: 'page',
                                            queryMode: 'local',
                                            store: 'i_pageStore',
                                            valueField: 'page',
                                            listeners: {
                                                keyup: {
                                                    fn: me.onI_filterPageCriterionKeyup,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'textfield',
                                            x: 830,
                                            y: 20,
                                            id: 'i_filterPage',
                                            width: 100,
                                            fieldLabel: '',
                                            labelSeparator: ' ',
                                            labelWidth: 80,
                                            enableKeyEvents: true,
                                            listeners: {
                                                change: {
                                                    fn: me.onI_filterPageChange,
                                                    scope: me
                                                },
                                                keypress: {
                                                    fn: me.onI_filterPageKeypress,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'textfield',
                                            hidden: true,
                                            id: 'i_filterPage_id',
                                            fieldLabel: 'Label'
                                        },
                                        {
                                            xtype: 'textfield',
                                            x: 10,
                                            y: 50,
                                            id: 'i_filterSession',
                                            width: 250,
                                            fieldLabel: 'SID',
                                            labelSeparator: ' ',
                                            labelWidth: 120,
                                            enableKeyEvents: true,
                                            listeners: {
                                                change: {
                                                    fn: me.onI_filterSessionChange,
                                                    scope: me
                                                },
                                                keypress: {
                                                    fn: me.onI_filterSessionKeypress,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'textfield',
                                            x: 320,
                                            y: 50,
                                            id: 'i_filterIp',
                                            width: 250,
                                            fieldLabel: 'IP',
                                            labelSeparator: ' ',
                                            labelWidth: 120,
                                            enableKeyEvents: true,
                                            regex: /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/,
                                            regexText: 'Illegal IP Address',
                                            listeners: {
                                                change: {
                                                    fn: me.onI_filterIpChange,
                                                    scope: me
                                                },
                                                keypress: {
                                                    fn: me.onI_filterIpKeypress,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            x: 580,
                                            y: 80,
                                            icon: 'Htmls/images/x.gif',
                                            text: '',
                                            listeners: {
                                                click: {
                                                    fn: me.i_x_click_att,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            x: 580,
                                            y: 50,
                                            icon: 'Htmls/images/x.gif',
                                            text: '',
                                            listeners: {
                                                click: {
                                                    fn: me.i_x_click_ip,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            x: 580,
                                            y: 20,
                                            icon: 'Htmls/images/x.gif',
                                            text: '',
                                            listeners: {
                                                click: {
                                                    fn: me.i_x_click_useragent,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'textfield',
                                            x: 640,
                                            y: 50,
                                            id: 'i_filterAtt',
                                            width: 230,
                                            fieldLabel: 'Parameter',
                                            labelSeparator: ' ',
                                            readOnly: true,
                                            enableKeyEvents: true,
                                            listeners: {
                                                change: {
                                                    fn: me.onI_filterAttChange,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            x: 880,
                                            y: 50,
                                            text: 'Browse',
                                            listeners: {
                                                click: {
                                                    fn: me.i_browse_click_att,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'textfield',
                                            x: 640,
                                            y: 80,
                                            disabled: true,
                                            id: 'i_filterAttValue',
                                            width: 230,
                                            fieldLabel: 'Value',
                                            labelSeparator: ' ',
                                            listeners: {
                                                change: {
                                                    fn: me.onI_filterAttValueChange,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'textfield',
                                            hidden: true,
                                            id: 'i_filterAtt_id',
                                            fieldLabel: 'Label'
                                        },
                                        {
                                            xtype: 'button',
                                            x: 940,
                                            y: 50,
                                            id: 'i_filterAtt_remove',
                                            icon: 'Htmls/images/x.gif',
                                            listeners: {
                                                click: {
                                                    fn: me.i_x_click_att_2,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'textfield',
                                            x: 10,
                                            y: 80,
                                            id: 'i_filterCity',
                                            width: 250,
                                            fieldLabel: 'City',
                                            labelSeparator: ' ',
                                            labelWidth: 120,
                                            enableKeyEvents: true,
                                            listeners: {
                                                change: {
                                                    fn: me.onI_filterCityChange,
                                                    scope: me
                                                },
                                                keypress: {
                                                    fn: me.onI_filterCityKeypress,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'combobox',
                                            x: 10,
                                            y: 110,
                                            id: 'i_filterFlow',
                                            width: 250,
                                            fieldLabel: 'Business Action',
                                            labelSeparator: ' ',
                                            labelWidth: 120,
                                            enableKeyEvents: true,
                                            editable: false,
                                            displayField: 'group',
                                            queryCaching: false,
                                            store: 'general_flow_group_store',
                                            listeners: {
                                                keyup: {
                                                    fn: me.onI_filterFlowKeyup,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            x: 270,
                                            y: 110,
                                            icon: 'Htmls/images/x.gif',
                                            text: '',
                                            listeners: {
                                                click: {
                                                    fn: me.i_x_click_flow,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            x: 270,
                                            y: 80,
                                            icon: 'Htmls/images/x.gif',
                                            text: '',
                                            listeners: {
                                                click: {
                                                    fn: me.i_x_click_city,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            x: 270,
                                            y: 50,
                                            icon: 'Htmls/images/x.gif',
                                            text: '',
                                            listeners: {
                                                click: {
                                                    fn: me.i_x_click_session,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            x: 270,
                                            y: 20,
                                            icon: 'Htmls/images/x.gif',
                                            text: '',
                                            listeners: {
                                                click: {
                                                    fn: me.i_x_click_user,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'combobox',
                                            x: 320,
                                            y: 110,
                                            id: 'i_filterMethod',
                                            width: 250,
                                            fieldLabel: 'Method',
                                            labelSeparator: ' ',
                                            labelWidth: 120,
                                            enableKeyEvents: true,
                                            editable: false,
                                            displayField: 'method',
                                            queryMode: 'local',
                                            store: 'global_methods_store',
                                            listeners: {
                                                change: {
                                                    fn: me.onI_filterUserAgentChange1,
                                                    scope: me
                                                },
                                                keypress: {
                                                    fn: me.onI_filterUserAgentKeypress1,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            x: 580,
                                            y: 110,
                                            icon: 'Htmls/images/x.gif',
                                            text: '',
                                            listeners: {
                                                click: {
                                                    fn: me.i_x_click_method,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            x: 110,
                                            y: 20,
                                            id: 'i_user_not',
                                            fieldLabel: '',
                                            boxLabel: ''
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            x: 420,
                                            y: 20,
                                            id: 'i_useragent_not',
                                            fieldLabel: '',
                                            boxLabel: ''
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            x: 110,
                                            y: 50,
                                            id: 'i_sid_not',
                                            fieldLabel: '',
                                            boxLabel: ''
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            x: 420,
                                            y: 50,
                                            id: 'i_ip_not',
                                            fieldLabel: '',
                                            boxLabel: ''
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            x: 110,
                                            y: 80,
                                            id: 'i_city_not',
                                            fieldLabel: '',
                                            boxLabel: ''
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            x: 110,
                                            y: 110,
                                            id: 'i_action_not',
                                            fieldLabel: '',
                                            boxLabel: ''
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            x: 420,
                                            y: 110,
                                            id: 'i_method_not',
                                            fieldLabel: '',
                                            boxLabel: ''
                                        },
                                        {
                                            xtype: 'label',
                                            x: 106,
                                            y: 5,
                                            text: 'Not'
                                        },
                                        {
                                            xtype: 'label',
                                            x: 416,
                                            y: 5,
                                            text: 'Not'
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            x: 640,
                                            y: 110,
                                            id: 'i_session_alerts',
                                            boxLabel: 'Only show sessions with alerts'
                                        }
                                    ],
                                    listeners: {
                                        render: {
                                            fn: me.onI_advancedRender,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'container',
                                    x: 10,
                                    y: 330,
                                    height: 30,
                                    id: 'i_buttons',
                                    width: 960,
                                    layout: 'absolute',
                                    items: [
                                        {
                                            xtype: 'button',
                                            x: 656,
                                            y: 0,
                                            id: 'i_search',
                                            icon: 'Htmls/images/search.png',
                                            text: 'Search',
                                            listeners: {
                                                click: {
                                                    fn: me.onI_searchClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            x: 730,
                                            y: 0,
                                            disabled: true,
                                            id: 'i_cancel',
                                            icon: 'Htmls/images/x.gif',
                                            text: 'Cancel',
                                            listeners: {
                                                click: {
                                                    fn: me.i_cancel_click,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            x: 803,
                                            y: 0,
                                            id: 'i_reset',
                                            icon: 'Htmls/images/undo.png',
                                            text: 'Reset',
                                            listeners: {
                                                click: {
                                                    fn: me.onI_resetClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            x: 871,
                                            y: 0,
                                            id: 'i_saveProfiles',
                                            icon: 'Htmls/images/save.gif',
                                            text: 'Save Profile',
                                            listeners: {
                                                click: {
                                                    fn: me.onI_saveProfilesClick,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'combobox',
                                    x: 10,
                                    y: 40,
                                    id: 'i_range',
                                    width: 180,
                                    fieldLabel: 'Range',
                                    labelSeparator: ' ',
                                    labelWidth: 50,
                                    value: 'Year',
                                    editable: false,
                                    displayField: 'type',
                                    queryMode: 'local',
                                    store: 'd_trendsScaleStore',
                                    valueField: 'type',
                                    listeners: {
                                        change: {
                                            fn: me.onInvestigate_ScaleChange,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            region: 'east',
                            id: 'i_searchProfiles',
                            width: 800,
                            layout: 'absolute',
                            collapsed: true,
                            collapsible: true,
                            title: 'Search Profiles',
                            items: [
                                {
                                    xtype: 'propertygrid',
                                    x: 10,
                                    y: 50,
                                    height: 248,
                                    id: 'i_current',
                                    width: 290,
                                    title: '',
                                    enableColumnHide: false,
                                    forceFit: true,
                                    source: {
                                        'Property 1': 'String',
                                        'Property 2': true,
                                        'Property 3': '2012-06-24T13:51:50',
                                        'Property 4': 123
                                    },
                                    listeners: {
                                        propertychange: {
                                            fn: me.onI_currentPropertyChange,
                                            scope: me
                                        },
                                        itemdblclick: {
                                            fn: me.onI_currentItemDblClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'container',
                                    x: 320,
                                    y: 0,
                                    height: 352,
                                    width: 420,
                                    layout: 'absolute',
                                    items: [
                                        {
                                            xtype: 'gridpanel',
                                            y: 50,
                                            height: 248,
                                            id: 'i_profiles',
                                            width: 250,
                                            title: '',
                                            enableColumnHide: false,
                                            enableColumnMove: false,
                                            forceFit: true,
                                            store: 'i_profilesStore',
                                            columns: [
                                                {
                                                    xtype: 'gridcolumn',
                                                    width: 207,
                                                    dataIndex: 'name',
                                                    text: 'Profile Name',
                                                    editor: {
                                                        xtype: 'textfield'
                                                    }
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                        return '<div><img src="Htmls/images/edit.gif" onclick="Ext.getCmp(\'i_profiles\').getPlugin(\'i_profiles_edit\').startEdit('+rowIndex+',Ext.getCmp(\'i_profiles\').columns[0])" align="center"></div>';
                                                    },
                                                    maxWidth: 40,
                                                    text: ''
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                        //return '<div><img src="Htmls/images/delete.gif" onclick="remove_item_from_table(\''+record.data.IP+'\',\'name\',\'i_profiles\')" align="center"></div>'; return '<div><img src="Htmls/images/delete.gif" onclick="remove_item_from_table(\''+record.data.IP+'\',\'name\',\'i_profiles\')" align="center"></div>';
                                                        return '<div><img src="Htmls/images/delete.gif" onclick="delete_search_profile()" align="center"></div>';
                                                    },
                                                    maxWidth: 40,
                                                    width: 111,
                                                    text: ''
                                                }
                                            ],
                                            listeners: {
                                                select: {
                                                    fn: me.onI_profilesSelect,
                                                    scope: me
                                                },
                                                itemdblclick: {
                                                    fn: me.onI_profilesItemDblClick,
                                                    scope: me
                                                }
                                            },
                                            selModel: Ext.create('Ext.selection.RowModel', {
                                                mode: 'MULTI'
                                            }),
                                            plugins: [
                                                Ext.create('Ext.grid.plugin.CellEditing', {
                                                    pluginId: 'i_profiles_edit',
                                                    clicksToEdit: 5
                                                })
                                            ]
                                        },
                                        {
                                            xtype: 'gridpanel',
                                            x: 260,
                                            y: 50,
                                            height: 248,
                                            id: 'i_profiles2',
                                            style: 'margin-left:10px;',
                                            width: 200,
                                            autoScroll: true,
                                            title: '',
                                            enableColumnHide: false,
                                            enableColumnMove: false,
                                            forceFit: true,
                                            store: 'i_profiles2Store',
                                            columns: [
                                                {
                                                    xtype: 'gridcolumn',
                                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                        val = value.split(':')
                                                        key = val[0]
                                                        field = parseInt(val[1].substring(1))
                                                        if (key=='Start Hour' || key=='End Hour'){
                                                            mins=new Date(field).getMinutes()
                                                            if (mins<10)
                                                            mins="0"+mins
                                                            hours=new Date(field).getHours()
                                                            if (hours<10)
                                                            hours="0"+hours
                                                            return key+": "+hours+":"+mins
                                                        }
                                                        if (key=='Start Date' || key=='End Date'){
                                                            return key+": "+new Date(field).getDate()+"/"+(new Date(field).getMonth()+1)+"/"+new Date(field).getYear().toString().substr(1)
                                                        }
                                                        return value;
                                                    },
                                                    dataIndex: 'desc',
                                                    text: 'Profile Info'
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'button',
                                            y: 310,
                                            disabled: true,
                                            id: 'i_loadProfiles',
                                            text: 'Load Profile',
                                            listeners: {
                                                click: {
                                                    fn: me.onI_loadProfilesClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            x: 70,
                                            y: 310,
                                            disabled: true,
                                            id: 'i_deleteProfiles',
                                            style: 'margin-left:10px;',
                                            icon: 'Htmls/images/delete.gif',
                                            text: 'Delete',
                                            listeners: {
                                                click: {
                                                    fn: me.onI_deleteProfilesClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            x: -2,
                                            y: 10,
                                            cls: 'tp-title',
                                            width: 470,
                                            text: 'Saved Profiles'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'label',
                                    x: 10,
                                    y: 10,
                                    cls: 'tp-title',
                                    width: 290,
                                    text: 'Current Filter'
                                }
                            ]
                        }
                    ]
                }
            ],
            items: [
                me.processI_suspects({
                    xtype: 'gridpanel',
                    id: 'i_suspects',
                    minWidth: 800,
                    padding: '',
                    resizable: false,
                    resizeHandles: 'n',
                    title: 'Requests',
                    enableColumnHide: false,
                    enableColumnMove: false,
                    forceFit: true,
                    store: 'i_suspectsStore',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return '<input type="checkbox" class="investigate-checkbox" rel="' + record.data.td0 + '">';

                            },
                            maxWidth: 30,
                            sortable: false,
                            text: '<input type="checkbox" class="investigate-checkbox-column">'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if(!SIDS[record.data.td3]) {
                                    SIDS[record.data.td3] = Object.keys(SIDS).length;
                                }
                                return Object.keys(SIDS).indexOf(record.data.td3);
                            },
                            maxWidth: 50,
                            width: 50,
                            defaultWidth: 50,
                            dataIndex: 'td3',
                            tdCls: 'td-SID',
                            text: 'SID',
                            editor: {
                                xtype: 'textfield',
                                allowBlank: false
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if(value) {

                                    var flow_store = Ext.StoreManager.getByKey('general_flow_group_store');
                                    var flow = flow_store.getById(value + '');

                                    if(flow) {
                                        return flow.data.group;
                                    } else {
                                        return '';
                                    }

                                } else {
                                    return '';
                                }
                            },
                            hidden: true,
                            id: 'investigate_flow',
                            maxWidth: 150,
                            minWidth: 150,
                            width: 150,
                            dataIndex: 'td23',
                            text: 'Business Action'
                        },
                        {
                            xtype: 'gridcolumn',
                            maxWidth: 110,
                            dataIndex: 'td14',
                            text: 'Time'
                        },
                        {
                            xtype: 'gridcolumn',
                            maxWidth: 70,
                            width: 70,
                            defaultWidth: 70,
                            dataIndex: 'td13',
                            text: 'Result',
                            editor: {
                                xtype: 'textfield',
                                allowBlank: false
                            }
                        },
                        {
                            xtype: 'numbercolumn',
                            maxWidth: 70,
                            width: 70,
                            defaultWidth: 70,
                            dataIndex: 'td0',
                            text: 'Click #',
                            format: '0'
                        },
                        {
                            xtype: 'gridcolumn',
                            maxWidth: 100,
                            minWidth: 100,
                            dataIndex: 'td2',
                            text: 'IP',
                            editor: {
                                xtype: 'textfield',
                                allowBlank: false
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'td5',
                            text: 'Location',
                            editor: {
                                xtype: 'textfield',
                                allowBlank: false
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            maxWidth: 60,
                            dataIndex: 'td20',
                            text: 'Type'
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 100,
                            dataIndex: 'td1',
                            text: 'User',
                            editor: {
                                xtype: 'textfield',
                                allowBlank: false
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if(value=='HTTPS')
                                return '<div><img src=\"Htmls/images/lock.png\" align=\"center\"></div>';
                            },
                            maxWidth: 50,
                            dataIndex: 'td21',
                            text: 'SSL'
                        },
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            dataIndex: 'td4',
                            text: 'City',
                            editor: {
                                xtype: 'textfield',
                                allowBlank: false
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if (!value || value==" " || value=="None"){
                                    return '';
                                }
                                metaData.tdAttr = 'data-qtip="' + value + '"';
                                return value;
                            },
                            dataIndex: 'td15',
                            text: 'Application',
                            editor: {
                                xtype: 'textfield',
                                allowBlank: false
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if (!value || value==" " || value=="None") {
                                    return '';
                                }
                                metaData.tdAttr = 'data-qtip="' + value + '"';
                                return value;
                            },
                            dataIndex: 'td16',
                            text: 'Page',
                            editor: {
                                xtype: 'textfield',
                                allowBlank: false
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var page_name=record.get('td16')
                                if (!page_name || page_name==" " || page_name=="None"){
                                    return '';
                                }
                                metaData.tdAttr = 'data-qtip="' + value + '"';
                                return value;
                            },
                            dataIndex: 'td22',
                            text: 'Page Title'
                        },
                        {
                            xtype: 'gridcolumn',
                            maxWidth: 100,
                            width: 100,
                            dataIndex: 'td17',
                            text: 'Cookie Value',
                            editor: {
                                xtype: 'textfield',
                                allowBlank: false
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            maxWidth: 50,
                            width: 100,
                            dataIndex: 'td19',
                            text: 'Average',
                            editor: {
                                xtype: 'textfield',
                                allowBlank: false
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            id: 'i_colQuery',
                            maxWidth: 50,
                            dataIndex: 'td6',
                            text: 'Query'
                        },
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            id: 'i_colClick',
                            maxWidth: 50,
                            dataIndex: 'td9',
                            text: 'Speed'
                        },
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            id: 'i_colLocation',
                            maxWidth: 50,
                            dataIndex: 'td10',
                            text: 'Geo'
                        },
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            id: 'i_colPath',
                            maxWidth: 50,
                            dataIndex: 'td8',
                            text: 'Flow'
                        },
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            id: 'i_colPage',
                            maxWidth: 50,
                            dataIndex: 'td7',
                            text: 'Flow'
                        }
                    ],
                    viewConfig: {
                        minWidth: 800,
                        autoScroll: false,
                        enableTextSelection: false,
                        listeners: {
                            render: {
                                fn: me.onGridviewRender,
                                scope: me
                            }
                        }
                    },
                    selModel: Ext.create('Ext.selection.CellModel', {
                        allowDeselect: true,
                        mode: 'SIMPLE',
                        preventWrap: true,
                        listeners: {
                            select: {
                                fn: me.onCellselectionmodelSelect1,
                                single: false,
                                scope: me
                            }
                        }
                    }),
                    listeners: {
                        itemcontextmenu: {
                            fn: me.onI_suspectsItemContextMenu,
                            scope: me
                        },
                        sortchange: {
                            fn: me.onI_suspectsSortChange,
                            scope: me
                        },
                        render: {
                            fn: me.onI_suspectsRender,
                            scope: me
                        }
                    },
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            width: 541,
                            items: [
                                {
                                    xtype: 'button',
                                    width: 100,
                                    text: 'Delete Selected'
                                },
                                {
                                    xtype: 'tbseparator'
                                },
                                {
                                    xtype: 'button',
                                    disabled: true,
                                    id: 'i_first',
                                    icon: 'extjs/resources/themes/images/default/grid/page-first-disabled.gif',
                                    text: '',
                                    listeners: {
                                        click: {
                                            fn: me.onI_firstClick,
                                            scope: me
                                        },
                                        disable: {
                                            fn: me.onI_firstDisable,
                                            scope: me
                                        },
                                        enable: {
                                            fn: me.onI_firstEnable,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    disabled: true,
                                    id: 'i_prev',
                                    icon: 'extjs/resources/themes/images/default/grid/page-prev-disabled.gif',
                                    text: '',
                                    listeners: {
                                        click: {
                                            fn: me.onI_prevClick,
                                            scope: me
                                        },
                                        disable: {
                                            fn: me.onI_prevDisable,
                                            scope: me
                                        },
                                        enable: {
                                            fn: me.onI_prevEnable,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'tbseparator'
                                },
                                {
                                    xtype: 'textfield',
                                    id: 'i_currentPage',
                                    width: 162,
                                    fieldLabel: 'Displaying Page',
                                    labelSeparator: ' ',
                                    value: 0,
                                    enableKeyEvents: true,
                                    listeners: {
                                        keydown: {
                                            fn: me.onI_currentPageKeydown,
                                            scope: me
                                        },
                                        change: {
                                            fn: me.onI_currentPageChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'displayfield',
                                    id: 'i_totalPages',
                                    width: 93,
                                    fieldLabel: 'of',
                                    labelSeparator: ' ',
                                    labelWidth: 15,
                                    value: 0,
                                    listeners: {
                                        change: {
                                            fn: me.onI_totalPagesChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'tbseparator'
                                },
                                {
                                    xtype: 'button',
                                    disabled: true,
                                    id: 'i_next',
                                    icon: 'extjs/resources/themes/images/default/grid/page-next-disabled.gif',
                                    text: '',
                                    listeners: {
                                        click: {
                                            fn: me.onI_nextClick,
                                            scope: me
                                        },
                                        disable: {
                                            fn: me.onI_nextDisable,
                                            scope: me
                                        },
                                        enable: {
                                            fn: me.onI_nextEnable,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    disabled: true,
                                    id: 'i_last',
                                    icon: 'extjs/resources/themes/images/default/grid/page-last-disabled.gif',
                                    text: '',
                                    listeners: {
                                        click: {
                                            fn: me.onI_lastClick,
                                            scope: me
                                        },
                                        enable: {
                                            fn: me.onI_lastEnable,
                                            scope: me
                                        },
                                        disable: {
                                            fn: me.onI_lastDisable,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'tbseparator'
                                },
                                {
                                    xtype: 'displayfield',
                                    id: 'i_totalResults',
                                    width: 172,
                                    fieldLabel: 'Total Results',
                                    labelSeparator: ' ',
                                    labelWidth: 80,
                                    value: 0
                                },
                                {
                                    xtype: 'tbseparator'
                                },
                                {
                                    xtype: 'combobox',
                                    id: 'i_results',
                                    width: 172,
                                    fieldLabel: 'Results per Page',
                                    labelSeparator: ' ',
                                    value: 25,
                                    editable: false,
                                    displayField: 'field',
                                    queryMode: 'local',
                                    store: 'i_resultsStore',
                                    listeners: {
                                        change: {
                                            fn: me.onI_resultsChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'tbseparator'
                                },
                                {
                                    xtype: 'hiddenfield',
                                    id: 'i_totalReqs',
                                    fieldLabel: 'Label'
                                },
                                {
                                    xtype: 'button',
                                    enableToggle: true,
                                    text: 'Show All Fields',
                                    listeners: {
                                        click: {
                                            fn: me.clickshowallfieldsinves,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'progressbar',
                            dock: 'top',
                            id: 'i_progress',
                            width: 100
                        }
                    ]
                })
            ]
        });

        me.callParent(arguments);
    },

    processI_suspects: function(config) {
        config.viewConfig.getRowClass = function (record) {
            if(!SIDS[record.data.td3]) {
                SIDS[record.data.td3] = Object.keys(SIDS).length;
            }
            return 'sid-color-' + (Object.keys(SIDS).indexOf(record.data.td3) % 10);
        }

        return config;
    },

    onI_startDateChange: function(field, newValue, oldValue, eOpts) {
        if (field.getValue()==null | Ext.getCmp('i_endDate').getValue()==null)
        return;


        //var newDate = field.getValue().setHours(Ext.getCmp("i_fromHour").getValue().getHours());
        //field.setValue(new Date(newDate));


        //Update source
        var src = Ext.getCmp("i_current").getSource();
        src["Start Date"] = newValue;
        Ext.getCmp("i_current").setSource(src);
    },

    onI_fromHourChange: function(field, newValue, oldValue, eOpts) {
        if (field.getValue()==null | Ext.getCmp('i_endDate').getValue()==null)
        return;

        var hour = field.getValue().getHours()+":"+(field.getValue().getMinutes()<10?'0':'') + field.getValue().getMinutes()

        //Update source
        var src = Ext.getCmp("i_current").getSource();
        src["Start Hour"] = hour;
        Ext.getCmp("i_current").setSource(src);
    },

    onI_endDateChange: function(field, newValue, oldValue, eOpts) {
        if (field.getValue()==null | Ext.getCmp('i_startDate').getValue()==null)
        return;


        var src = Ext.getCmp("i_current").getSource();
        src["End Date"] = newValue;
        Ext.getCmp("i_current").setSource(src);
    },

    onI_toHourChange: function(field, newValue, oldValue, eOpts) {
        if (field.getValue()==null | Ext.getCmp('i_startDate').getValue()==null)
        return;

        var hour = field.getValue().getHours()+":"+(field.getValue().getMinutes()<10?'0':'') + field.getValue().getMinutes()

        //Update source
        var src = Ext.getCmp("i_current").getSource();
        src["End Hour"] = hour;
        Ext.getCmp("i_current").setSource(src);
    },

    onI_filterAvgTotChange: function(field, newValue, oldValue, eOpts) {
        var string = Ext.getCmp("i_current").getSource()["Score Criteria"].split(" ");

        var ans = "";
        if (newValue.split(" ").length==2){
            newValue = newValue.split(" ");
            string[0] = newValue[0];
            string[1] = newValue[1];

        }
        else{
            string[0] = newValue;
        }
        for(i=0;i<string.length;i++){
            ans+=string[i]+" ";
        }
        var src = Ext.getCmp("i_current").getSource();
        src["Score Criteria"] = ans;
        Ext.getCmp("i_current").setSource(src);
    },

    onI_filterAvgTot0Keyup: function(textfield, e, eOpts) {
        var combo = textfield;
        var event = e;
        var key = String.fromCharCode(event.getKey()),
            boundList = combo.getPicker(),
            store = boundList.getStore(),
            record = store.findRecord(combo.displayField, key);

        if (record) {
            boundList.highlightItem(boundList.getNode(record));
        }
    },

    onI_filterComparatorChange: function(field, newValue, oldValue, eOpts) {
        var string = Ext.getCmp("i_current").getSource()["Score Criteria"].split(" ");
        var ans = "";
        newValue = newValue.split(" ")
        if (Ext.getCmp("i_filterAtt").getValue().split(" ").length==2){
            string[2] = newValue[0];
            string[3] = newValue[1];
        }
        else{
            string[1] = newValue[0];
            string[2] = newValue[1];
        }
        for(i=0;i<string.length;i++){
            ans+=string[i]+" ";
        }
        var src = Ext.getCmp("i_current").getSource();
        src["Score Criteria"] = ans;
        Ext.getCmp("i_current").setSource(src);
    },

    onI_filterComparator0Keyup: function(textfield, e, eOpts) {
        var combo = textfield;
        var event = e;
        var key = String.fromCharCode(event.getKey()),
            boundList = combo.getPicker(),
            store = boundList.getStore(),
            record = store.findRecord(combo.displayField, key);

        if (record) {
            boundList.highlightItem(boundList.getNode(record));
        }
    },

    onI_filterScoreChange: function(field, newValue, oldValue, eOpts) {
        var string = Ext.getCmp("i_current").getSource()["Score Criteria"].split(" ");
        var ans = "";
        string[(Ext.getCmp("i_filterAtt").getValue().split(" ").length==2?4:3)] = newValue+"%";
        for(i=0;i<string.length;i++){
            ans+=string[i]+" ";
        }
        var src = Ext.getCmp("i_current").getSource();
        src["Score Criteria"] = ans;
        Ext.getCmp("i_current").setSource(src);
    },

    onI_filterScore0Keyup: function(textfield, e, eOpts) {
        /*var combo = textfield;
        var event = e;
        var key = String.fromCharCode(event.getKey()),
            boundList = combo.getPicker(),
            store = boundList.getStore(),
            record = store.findRecord(combo.displayField, key);

        if (record) {
            boundList.highlightItem(boundList.getNode(record));
        }*/
    },

    add_cri_click: function(button, e, eOpts) {
        addSearchCriterion();
    },

    onButtonRender: function(component, eOpts) {
        var tip = Ext.create('Ext.tip.ToolTip', {
            target: component.getEl(),
            html: 'Add Search Criterion'
        });
    },

    onI_filterUserChange: function(field, newValue, oldValue, eOpts) {
        var src = Ext.getCmp("i_current").getSource();
        src["User"] = newValue;
        Ext.getCmp("i_current").setSource(src);
    },

    onI_filterUserKeypress: function(textfield, e, eOpts) {
        if (e.keyCode==13)
        investigate_main(0)
    },

    onI_filterUserAgentChange: function(field, newValue, oldValue, eOpts) {
        var src = Ext.getCmp("i_current").getSource();
        src["User-Agent"] = newValue;
        Ext.getCmp("i_current").setSource(src);
    },

    onI_filterUserAgentKeypress: function(textfield, e, eOpts) {
        if (e.keyCode==13)
        investigate_main(0)
    },

    onI_filterPageCriterionKeyup: function(textfield, e, eOpts) {
        var combo = textfield;
        var event = e;
        var key = String.fromCharCode(event.getKey()),
            boundList = combo.getPicker(),
            store = boundList.getStore(),
            record = store.findRecord(combo.displayField, key);

        if (record) {
            boundList.highlightItem(boundList.getNode(record));
        }
    },

    onI_filterPageChange: function(field, newValue, oldValue, eOpts) {
        var src = Ext.getCmp("i_current").getSource();
        src["Page"] = newValue;
        Ext.getCmp("i_current").setSource(src);
    },

    onI_filterPageKeypress: function(textfield, e, eOpts) {
        if (e.keyCode==13)
        investigate_main(0)
    },

    onI_filterSessionChange: function(field, newValue, oldValue, eOpts) {
        var src = Ext.getCmp("i_current").getSource();
        src["SID"] = newValue;
        Ext.getCmp("i_current").setSource(src);
    },

    onI_filterSessionKeypress: function(textfield, e, eOpts) {
        if (e.keyCode==13)
        investigate_main(0)
    },

    onI_filterIpChange: function(field, newValue, oldValue, eOpts) {
        var src = Ext.getCmp("i_current").getSource();
        src["IP"] = newValue;
        Ext.getCmp("i_current").setSource(src);
    },

    onI_filterIpKeypress: function(textfield, e, eOpts) {
        if (e.keyCode==13)
        investigate_main(0)
    },

    i_x_click_att: function(button, e, eOpts) {
        Ext.getCmp('i_filterCountry').reset()
    },

    i_x_click_ip: function(button, e, eOpts) {
        Ext.getCmp('i_filterIp').reset()
    },

    i_x_click_useragent: function(button, e, eOpts) {
        Ext.getCmp('i_filterUserAgent').reset()
    },

    onI_filterAttChange: function(field, newValue, oldValue, eOpts) {
        if (newValue!=null)
        Ext.getCmp("i_filterAttValue").enable();

        changeAttribute = true;
        var src = Ext.getCmp("i_current").getSource();
        //var ans;
        //if (src["Parameter"]==undefined | src["Parameter"]==null | src["Parameter"]=="")//is empty
        //src["Parameter"] = newValue+" = ";
        //else{
            //ans = src["Parameter"].split("=");
            //ans[0] = newValue;
            //ans = ans.toString();
        src["Parameter"] = newValue;
        Ext.getCmp("i_current").setSource(src);
        //}
    },

    i_browse_click_att: function(button, e, eOpts) {
        telepath.investigate.browse_att();
    },

    onI_filterAttValueChange: function(field, newValue, oldValue, eOpts) {
        var src = Ext.getCmp("i_current").getSource();
        //var ans=""
        //var att = Ext.getCmp('i_filterAtt').getValue();
        //src["Attribute"] = att+"="+newValue;
        //Ext.getCmp("i_current").setSource(src);

        src["Parameter Value"] = newValue;
        Ext.getCmp("i_current").setSource(src);

    },

    i_x_click_att_2: function(button, e, eOpts) {
        Ext.getCmp('i_filterAtt_id').reset()
        Ext.getCmp("i_filterAtt").reset()
        Ext.getCmp("i_filterAttValue").reset()
        Ext.getCmp("i_filterAttValue").disable();


    },

    onI_filterCityChange: function(field, newValue, oldValue, eOpts) {
        var src = Ext.getCmp("i_current").getSource();
        src["City"] = newValue;
        Ext.getCmp("i_current").setSource(src);
    },

    onI_filterCityKeypress: function(textfield, e, eOpts) {
        if (e.keyCode==13)
        investigate_main(0)
    },

    onI_filterFlowKeyup: function(textfield, e, eOpts) {
        var combo = textfield;
        var event = e;
        var key = String.fromCharCode(event.getKey()),
            boundList = combo.getPicker(),
            store = boundList.getStore(),
            record = store.findRecord(combo.displayField, key);

        if (record) {
            boundList.highlightItem(boundList.getNode(record));
        }
    },

    onI_advancedRender: function(component, eOpts) {
        add_countries_to_search_panel(component);
    },

    i_x_click_flow: function(button, e, eOpts) {
        Ext.getCmp('i_filterFlow').reset()
    },

    i_x_click_city: function(button, e, eOpts) {
        Ext.getCmp('i_filterCity').reset()
    },

    i_x_click_session: function(button, e, eOpts) {
        Ext.getCmp('i_filterSession').reset()
    },

    i_x_click_user: function(button, e, eOpts) {
        Ext.getCmp('i_filterUser').reset()
    },

    onI_filterUserAgentChange1: function(field, newValue, oldValue, eOpts) {
        var src = Ext.getCmp("i_current").getSource();
        src["Method"] = newValue;
        Ext.getCmp("i_current").setSource(src);
    },

    onI_filterUserAgentKeypress1: function(textfield, e, eOpts) {
        if (e.keyCode==13)
        investigate_main(0)
    },

    i_x_click_method: function(button, e, eOpts) {
        Ext.getCmp('i_filterMethod').reset()
    },

    onI_searchClick: function(button, e, eOpts) {
        investigate_main(0)
    },

    i_cancel_click: function(button, e, eOpts) {
        cancel_query()
    },

    onI_resetClick: function(button, e, eOpts) {
        resetFields();
        initHUB();
    },

    onI_saveProfilesClick: function(button, e, eOpts) {
        if (Ext.WindowManager.get("ProfileSave")==undefined){
            var window = Ext.create('MyApp.view.ProfileSave').show();

        }
        else
        Ext.WindowManager.get("ProfileSave").show();


    },

    onInvestigate_ScaleChange: function(field, newValue, oldValue, eOpts) {
        telepath.investigate.scaleChange(newValue);
    },

    onI_currentPropertyChange: function(source, recordId, value, oldValue, eOpts) {
        updateChangefromHUB(source,recordId,value,oldValue,eOpts);
        //Ext.getCmp("i_current").sortchange(ct,,"ASC");
    },

    onI_currentItemDblClick: function(dataview, record, item, index, e, eOpts) {
        loadSearchFilter();
        Ext.getCmp('i_search').fireEvent('click')
    },

    onI_profilesSelect: function(rowmodel, record, index, eOpts) {
        selectProfile(rowmodel,record,index,eOpts);
        Ext.getCmp('i_deleteProfiles').enable();
        Ext.getCmp('i_loadProfiles').enable();
    },

    onI_profilesItemDblClick: function(dataview, record, item, index, e, eOpts) {
        loadSearchFilter();
        Ext.getCmp('i_search').fireEvent('click')
    },

    onI_loadProfilesClick: function(button, e, eOpts) {
        loadSearchFilter();
        Ext.getCmp('i_search').fireEvent('click')
    },

    onI_deleteProfilesClick: function(button, e, eOpts) {
        delete_search_profile()
    },

    onGridviewRender: function(component, eOpts) {

        component.getEl().addListener(
        'keydown',
        function(  e,  t,  eOpts ){
            e.preventDefault();
            if (e.keyCode == 13) {
                //selected_record1 = Ext.getCmp("i_suspects").getSelectionModel().getSelection()[0];
                openAttributesWin(i_selected_record);
            }

        }
        );
        component.getEl().addListener(
        'keypress',
        function(  e,  t,  eOpts ){
            e.preventDefault();
            if (e.keyCode == 13) {
                //selected_record1 = Ext.getCmp("i_suspects").getSelectionModel().getSelection()[0];
                openAttributesWin(i_selected_record);
            }

        }
        );

    },

    onCellselectionmodelSelect1: function(cellmodel, record, row, column, eOpts) {
        i_cell_num_selected = column;
        i_selected_record = record;
        setTimeout(function () {
            i_selected_index = cellmodel.selection.columnHeader.dataIndex;
        }, 50);

    },

    onI_suspectsItemContextMenu: function(dataview, record, item, index, e, eOpts) {
        telepath.investigate.suspectsContextMenu(dataview,record,item,index,e,eOpts);
    },

    onI_firstClick: function(button, e, eOpts) {
        i_getFirst();
    },

    onI_firstDisable: function(component, eOpts) {
        component.setIcon("extjs/resources/themes/images/default/grid/page-first-disabled.gif");
    },

    onI_firstEnable: function(component, eOpts) {
        component.setIcon("extjs/resources/themes/images/default/grid/page-first.gif");
    },

    onI_prevClick: function(button, e, eOpts) {
        i_getPrev();
    },

    onI_prevDisable: function(component, eOpts) {
        component.setIcon("extjs/resources/themes/images/default/grid/page-prev-disabled.gif");
    },

    onI_prevEnable: function(component, eOpts) {
        component.setIcon("extjs/resources/themes/images/default/grid/page-prev.gif");
    },

    onI_currentPageKeydown: function(textfield, e, eOpts) {
        if (e.keyCode == 13) {
            if (parseInt(textfield.getValue())>=0 && parseInt(Ext.getCmp("i_totalPages").getValue())>= parseInt(textfield.getValue()))
            getPageAt(parseInt(textfield.getValue()));

        }
    },

    onI_currentPageChange: function(field, newValue, oldValue, eOpts) {
        Ext.getCmp('i_next').disable()
        Ext.getCmp('i_last').disable()
        Ext.getCmp('i_prev').disable();
        Ext.getCmp('i_first').disable();

        if (newValue==0 || newValue==1){
            Ext.getCmp('i_prev').disable();
            Ext.getCmp('i_first').disable();
        }
        else{
            Ext.getCmp('i_prev').enable();
            Ext.getCmp('i_first').enable();
        }

        var pages_num = Ext.getCmp('i_totalPages').getValue()

        if (pages_num=='Updating'){
            Ext.getCmp('i_next').disable()
            Ext.getCmp('i_last').disable()
            Ext.getCmp('i_prev').disable();
            Ext.getCmp('i_first').disable();
        }
        else if (newValue==parseInt(pages_num)){
            Ext.getCmp('i_next').disable()
            Ext.getCmp('i_last').disable()
        }

        else if (newValue<parseInt(pages_num)){
            Ext.getCmp('i_next').enable()
            Ext.getCmp('i_last').enable()
        }
    },

    onI_totalPagesChange: function(field, newValue, oldValue, eOpts) {
        Ext.getCmp('i_next').disable();
        Ext.getCmp('i_prev').disable();
        Ext.getCmp('i_first').disable();
        Ext.getCmp('i_last').disable();
        var current_page = Ext.getCmp('i_currentPage').getValue()

        //if we're udating keep all disabled
        if (newValue=="Updating"){
            return;
        }

        //if were on the second page or bigger enable prev and first
        if (current_page>1){
            Ext.getCmp('i_prev').enable();
            Ext.getCmp('i_first').enable();
        }

        if (current_page<newValue){
            Ext.getCmp('i_next').enable();
            Ext.getCmp('i_last').enable();
        }
        //if we're on the last page
        else if(current_page==newValue){
            Ext.getCmp('i_next').disable();
            Ext.getCmp('i_last').disable();
        }

    },

    onI_nextClick: function(button, e, eOpts) {
        i_getNext();
    },

    onI_nextDisable: function(component, eOpts) {
        component.setIcon("extjs/resources/themes/images/default/grid/page-next-disabled.gif");
    },

    onI_nextEnable: function(component, eOpts) {
        component.setIcon("extjs/resources/themes/images/default/grid/page-next.gif");
    },

    onI_lastClick: function(button, e, eOpts) {
        i_getLast();
    },

    onI_lastEnable: function(component, eOpts) {
        component.setIcon("extjs/resources/themes/images/default/grid/page-last.gif");
    },

    onI_lastDisable: function(component, eOpts) {
        component.setIcon("extjs/resources/themes/images/default/grid/page-last-disabled.gif");
    },

    onI_resultsChange: function(field, newValue, oldValue, eOpts) {
        var filterPanelHeight = (!Ext.getCmp('i_filterPanel').collapsed? 21:Ext.getCmp('i_filterPanel').getHeight())
        var current_page = Ext.getCmp('i_currentPage').getValue();
        if (newValue==25){
            setPanelHeight(1200+filterPanelHeight)
        }
        if (newValue==50){
            setPanelHeight(1700+filterPanelHeight)
        }
        if (newValue==100){
            setPanelHeight(2750+filterPanelHeight)
        }

        if (Ext.getCmp('i_suspects').getStore().getCount())
        	investigate_main(0,g_last_investigate_params);
    },

    clickshowallfieldsinves: function(button, e, eOpts) {
        if(Ext.getCmp('i_colQuery').hidden) {

        	Ext.getCmp('i_colQuery').show();
            Ext.getCmp('i_colLocation').show();
            Ext.getCmp('i_colPath').show();
            Ext.getCmp('i_colClick').show();

        } else {

            Ext.getCmp('i_colQuery').hide();
            Ext.getCmp('i_colLocation').hide();
            Ext.getCmp('i_colPath').hide();
            Ext.getCmp('i_colClick').hide();

        }
    },

    onI_suspectsSortChange: function(ct, column, direction, eOpts) {
        sort_investigate_results(column,direction)
    },

    onI_suspectsRender: function(component, eOpts) {
        new Ext.LoadMask(component,{ msg:"Loading Data...",id:"i_searching"});
    }

});
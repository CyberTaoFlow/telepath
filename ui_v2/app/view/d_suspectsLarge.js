/*
 * File: app/view/d_suspectsLarge.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.d_suspectsLarge', {
    extend: 'Ext.grid.Panel',

    requires: [
        'Ext.grid.column.Column',
        'Ext.form.field.Text',
        'Ext.grid.View',
        'Ext.selection.CellModel',
        'Ext.grid.plugin.CellEditing'
    ],

    draggable: true,
    floating: true,
    id: 'd_suspectsLarge',
    maxHeight: 400,
    style: 'height:100%;\nwidth:100%;',
    closable: true,
    closeAction: 'hide',
    title: 'Top Suspects',
    forceFit: true,
    store: 'd_suspectsStore',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            columns: [
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return date_format('d/m/y H:i:s', value);
                    },
                    dataIndex: 'td0',
                    text: 'Date',
                    listeners: {
                        render: {
                            fn: me.onGridcolumnRender1,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'td1',
                    text: 'User',
                    editor: {
                        xtype: 'textfield',
                        allowBlank: false
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'td2',
                    text: 'IP',
                    editor: {
                        xtype: 'textfield',
                        allowBlank: false
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'td3',
                    text: 'City',
                    editor: {
                        xtype: 'textfield',
                        allowBlank: false
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return '<span class="flag flag-' + value + '"></span>&nbsp;&nbsp;'+ aliasToName[value];
                    },
                    dataIndex: 'td4',
                    text: 'Country',
                    editor: {
                        xtype: 'textfield',
                        allowBlank: false
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'td12',
                    text: 'Average Score'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'td5',
                    text: 'Query'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'td7',
                    text: 'Path'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'td8',
                    text: 'Speed'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'td9',
                    text: 'Location'
                },
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    dataIndex: 'td13',
                    text: 'SID'
                }
            ],
            selModel: Ext.create('Ext.selection.CellModel', {
                listeners: {
                    select: {
                        fn: me.onCellselectionmodelSelect,
                        scope: me
                    }
                }
            }),
            plugins: [
                Ext.create('Ext.grid.plugin.CellEditing', {
                    pluginId: 'd_edit',
                    listeners: {
                        edit: {
                            fn: me.onGridcelleditingpluginEdit3,
                            scope: me
                        }
                    }
                })
            ],
            listeners: {
                show: {
                    fn: me.onD_suspectsLargeShow,
                    scope: me
                },
                hide: {
                    fn: me.onD_suspectsLargeHide,
                    scope: me
                },
                itemdblclick: {
                    fn: me.onD_suspectsLargeItemDblClick,
                    scope: me
                },
                itemcontextmenu: {
                    fn: me.onD_suspectsLargeItemContextMenu,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onGridcolumnRender1: function(component, eOpts) {
        var tip = Ext.create('Ext.tip.ToolTip', {
            target: component.getEl(),
            html: 'Double click on a date to investigate'
        });
    },

    onCellselectionmodelSelect: function(cellmodel, record, row, column, eOpts) {
        if (column==1)
        Ext.getCmp('d_suspects_menu1').disable();
        else
        Ext.getCmp('d_suspects_menu1').enable();
        d_suspects_selected_cell = [record,column];//.get('td'+column);
    },

    onGridcelleditingpluginEdit3: function(editor, e, eOpts) {
        e.record.set(e.field,e.originalValue);
    },

    onD_suspectsLargeShow: function(component, eOpts) {
        Ext.getCmp('main_panel').disable();
        var win = Ext.getCmp('d_suspectsLarge');
        var width = $(document).width();
        var height = $(document).height();
        win.setPosition(width*0.13,40);
        win.setHeight(height*0.66);
        win.setWidth(width*0.66);

    },

    onD_suspectsLargeHide: function(component, eOpts) {
        Ext.getCmp('main_panel').enable();
    },

    onD_suspectsLargeItemDblClick: function(dataview, record, item, index, e, eOpts) {
        Ext.WindowManager.get('d_suspectsLarge').hide();
        if (d_suspects_selected_cell[1]!=0)
        return;
        Ext.getCmp('investigatePanel').show();
        var params={}
        params['SID'] =d_suspects_selected_cell[0].get("td13");
        window.parent.investigate_main(0, params);
        Ext.getCmp('i_filterSession').setValue(d_suspects_selected_cell[0].get("td13"));
    },

    onD_suspectsLargeItemContextMenu: function(dataview, record, item, index, e, eOpts) {
        d_suspectsPanel_rightclick(dataview,record,item,index,e,eOpts);
    }

});
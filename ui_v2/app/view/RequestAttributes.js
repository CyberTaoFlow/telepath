/*
 * File: app/view/RequestAttributes.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.RequestAttributes', {
    extend: 'Ext.window.Window',

    requires: [
        'Ext.form.field.Display',
        'Ext.grid.Panel',
        'Ext.grid.column.Column',
        'Ext.grid.View',
        'Ext.button.Button',
        'Ext.toolbar.Toolbar',
        'Ext.form.Label',
        'Ext.form.field.Checkbox',
        'Ext.panel.Tool'
    ],

    height: 652,
    id: 'RequestAttributes',
    width: 813,
    layout: 'absolute',
    bodyPadding: 5,
    closeAction: 'hide',
    title: 'Request Details',
    maximizable: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'displayfield',
                    x: 10,
                    y: 10,
                    height: 30,
                    hidden: true,
                    id: 'RequestAttributes_url',
                    style: 'font-size:14px;\ntext-align:center;',
                    width: 790,
                    fieldStyle: 'font-size:18px; text-align:center;'
                },
                {
                    xtype: 'gridpanel',
                    x: 40,
                    y: 10,
                    height: 200,
                    id: 'RA_Details',
                    width: 550,
                    title: 'Request Details',
                    enableColumnHide: false,
                    enableColumnMove: false,
                    forceFit: true,
                    scroll: 'horizontal',
                    store: 'RequestAttributes_details',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            maxWidth: 100,
                            dataIndex: 'td0',
                            hideable: false,
                            text: 'Variable'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if (record.get('td0')=='Application' && ( !value || value==" " || value=="None")){
                                    return 'n/a';
                                }

                                if (record.get('td0')=='URL' && value=="Page Deleted"){
                                    return '<div align="left" style="color:red;">Page Deleted</div>';
                                }
                                else if(record.get('td0')=='URL'){
                                    return "<a href=\""+value+"\" target=\'_blank\'>"+value+"</a>"
                                }


                                if (record.get('td0')=='Location'){

                                    value = value.split(',');

                                    value[0] = value[0].trim();
                                    value[1] = value[1].trim();

                                    var label = value[0] + ', ' + aliasToName[value[1]];

                                    if(value[0] == 'Unknown') {
                                        label = aliasToName[value[1]];
                                    }

                                    return '<div><span class=\"flag flag-' + value[1].toLowerCase() + '\"></span>&nbsp;&nbsp' + label + '</div>';

                                }

                                metaData.tdAttr = 'data-qtip="' + value + '"';

                                return value
                            },
                            dataIndex: 'td1',
                            hideable: false,
                            text: 'Value'
                        }
                    ],
                    viewConfig: {
                        enableTextSelection: true
                    }
                },
                {
                    xtype: 'button',
                    x: 10,
                    y: 80,
                    id: 'RequestAttributes_prev',
                    icon: 'extjs/resources/themes/images/default/grid/page-prev.gif',
                    text: '',
                    listeners: {
                        click: {
                            fn: me.onRequestAttributes_prevClick,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'button',
                    x: 770,
                    y: 80,
                    id: 'RequestAttributes_next',
                    icon: 'extjs/resources/themes/images/default/grid/page-next.gif',
                    text: '',
                    listeners: {
                        click: {
                            fn: me.onRequestAttributes_nextClick,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'gridpanel',
                    x: 40,
                    y: 220,
                    height: 390,
                    id: 'RA_Parameters',
                    width: 720,
                    autoScroll: true,
                    title: 'Request Parameters',
                    store: 'RequestParameters',
                    viewConfig: {
                        id: 'RA_Parameters_grid',
                        padding: '0 20 0 0 ',
                        overflowX: 'auto',
                        overflowY: 'auto'
                    },
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                metaData.tdAttr = 'data-qtip="' + strip(value) + '"';
                                return value;
                            },
                            width: 176,
                            dataIndex: 'td0',
                            text: 'Name'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                metaData.tdAttr = 'data-qtip="' + strip(value) + '"';
                                return value;
                            },
                            dataIndex: 'td1',
                            text: 'Value',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 68,
                            dataIndex: 'type',
                            text: 'Type'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if(parseInt(value) > 70) {
                                    return '<b style="color: red;">' + value + '</b>';
                                } else {
                                    return '<b style="color: black;">' + value + '</b>';
                                }
                            },
                            width: 63,
                            dataIndex: 'td2',
                            text: 'Score'
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            hidden: true,
                            id: 'RA_Parameters_filterBar',
                            layout: {
                                type: 'hbox',
                                padding: 5
                            },
                            items: [
                                {
                                    xtype: 'label',
                                    padding: '0 10',
                                    width: 50,
                                    text: 'Filter:'
                                },
                                {
                                    xtype: 'checkboxfield',
                                    id: 'RA_Parameter_filter_header',
                                    padding: '0 5',
                                    width: 60,
                                    boxLabel: 'Header',
                                    checked: true,
                                    listeners: {
                                        change: {
                                            fn: me.onRA_Parameter_filter_headerChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'checkboxfield',
                                    id: 'RA_Parameter_filter_get',
                                    padding: '0 5',
                                    width: 60,
                                    boxLabel: 'Get',
                                    checked: true,
                                    listeners: {
                                        change: {
                                            fn: me.onRA_Parameter_filter_getChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'checkboxfield',
                                    id: 'RA_Parameter_filter_post',
                                    padding: '0 5',
                                    width: 60,
                                    boxLabel: 'Post',
                                    checked: true,
                                    listeners: {
                                        change: {
                                            fn: me.onRA_Parameter_filter_postChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'checkboxfield',
                                    id: 'RA_Parameter_filter_json',
                                    padding: '0 5',
                                    width: 60,
                                    boxLabel: 'JSON',
                                    checked: true,
                                    listeners: {
                                        change: {
                                            fn: me.onRA_Parameter_filter_jsonChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'checkboxfield',
                                    id: 'RA_Parameter_filter_xml',
                                    padding: '0 5',
                                    width: 60,
                                    boxLabel: 'XML',
                                    checked: true,
                                    listeners: {
                                        change: {
                                            fn: me.onRA_Parameter_filter_xmlChange,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    tools: [
                        {
                            xtype: 'tool',
                            type: 'down',
                            listeners: {
                                click: {
                                    fn: me.onToolClick,
                                    scope: me
                                }
                            }
                        }
                    ],
                    listeners: {
                        itemcontextmenu: {
                            fn: me.onRA_ParametersItemContextMenu,
                            scope: me
                        },
                        itemmouseenter: {
                            fn: me.onRA_ParametersItemMouseEnter,
                            scope: me
                        },
                        itemmouseleave: {
                            fn: me.onRA_ParametersItemMouseLeave,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'gridpanel',
                    x: 600,
                    y: 10,
                    height: 200,
                    id: 'RA_Scores',
                    width: 160,
                    title: 'Request Scores',
                    store: 'RequestScores',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            width: 95,
                            dataIndex: 'key',
                            text: 'Name'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if(parseInt(value) > 70) {
                                    return '<b style="color: red;">' + value + '</b>';
                                } else {
                                    return '<b style="color: black;">' + value + '</b>';
                                }
                            },
                            width: 63,
                            sortable: true,
                            dataIndex: 'value',
                            text: 'Score'
                        }
                    ]
                }
            ],
            listeners: {
                destroy: {
                    fn: me.onRequestAttributesDestroy,
                    scope: me
                },
                render: {
                    fn: me.onRequestAttributesRender,
                    scope: me
                },
                resize: {
                    fn: me.onRequestAttributesResize,
                    scope: me
                },
                show: {
                    fn: me.onRequestAttributesShow,
                    scope: me
                },
                hide: {
                    fn: me.onRequestAttributesHide,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onRequestAttributes_prevClick: function(button, e, eOpts) {
        prevAtt();

    },

    onRequestAttributes_nextClick: function(button, e, eOpts) {
        nextAtt();
    },

    onRequestAttributesDestroy: function(component, eOpts) {
        Ext.getCmp('main_panel').enable();
        if (requestAttributes_balloon){
            requestAttributes_balloon.hide();
        }
    },

    onRequestAttributesRender: function(component, eOpts) {
        requestAttributes_balloon = Ext.create('MyApp.view.RequestAttributes_balloon');

    },

    onRequestAttributesResize: function(window, width, height, eOpts) {
        telepath.investigate.requestAttributesResize(window, width, height, eOpts);

    },

    onRequestAttributesShow: function(component, eOpts) {
        Ext.getCmp('main_panel').disable();
    },

    onRequestAttributesHide: function(component, eOpts) {
        Ext.getCmp('main_panel').enable();
        if (requestAttributes_balloon){
            requestAttributes_balloon.hide();
        }
    },

    onRA_Parameter_filter_headerChange: function(field, newValue, oldValue, eOpts) {
        telepath.investigate.requestAttributesFilterUpdate();
    },

    onRA_Parameter_filter_getChange: function(field, newValue, oldValue, eOpts) {
        telepath.investigate.requestAttributesFilterUpdate();
    },

    onRA_Parameter_filter_postChange: function(field, newValue, oldValue, eOpts) {
        telepath.investigate.requestAttributesFilterUpdate();
    },

    onRA_Parameter_filter_jsonChange: function(field, newValue, oldValue, eOpts) {
        telepath.investigate.requestAttributesFilterUpdate();
    },

    onRA_Parameter_filter_xmlChange: function(field, newValue, oldValue, eOpts) {
        telepath.investigate.requestAttributesFilterUpdate();
    },

    onToolClick: function(tool, e, eOpts) {
        if(tool.type == 'up') {
            tool.setType('down');
            Ext.getCmp('RA_Parameters_filterBar').hide();
        } else {
            tool.setType('up');
            Ext.getCmp('RA_Parameters_filterBar').show();

        }

    },

    onRA_ParametersItemContextMenu: function(dataview, record, item, index, e, eOpts) {
        telepath.investigate.parameterContextMenu(dataview, record, item, index, e, eOpts);
    },

    onRA_ParametersItemMouseEnter: function(dataview, record, item, index, e, eOpts) {
        telepath.investigate.parameterMouseEnter(dataview, record, item, index, e, eOpts);
    },

    onRA_ParametersItemMouseLeave: function(dataview, record, item, index, e, eOpts) {
        telepath.investigate.parameterMouseLeave(dataview, record, item, index, e, eOpts);
    }

});
/*
 * File: app/view/Alerts.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.Alerts', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.alerts',

    requires: [
        'Ext.button.Button',
        'Ext.toolbar.Separator',
        'Ext.form.field.Date',
        'Ext.form.field.Time',
        'Ext.grid.Panel',
        'Ext.grid.column.Column',
        'Ext.grid.View',
        'Ext.selection.CheckboxModel',
        'Ext.tree.Panel',
        'Ext.tree.View',
        'Ext.toolbar.Paging',
        'Ext.form.field.Checkbox',
        'Ext.form.FieldContainer',
        'Ext.selection.CellModel'
    ],

    id: 'alertsPanel',
    layout: 'fit',
    title: 'Alerts',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'panel',
                    layout: 'fit',
                    dockedItems: [
                        {
                            xtype: 'panel',
                            dock: 'left',
                            maxWidth: 330,
                            width: 338,
                            layout: 'fit',
                            collapseDirection: 'left',
                            collapsible: true,
                            title: 'Filters',
                            dockedItems: [
                                {
                                    xtype: 'toolbar',
                                    dock: 'top',
                                    items: [
                                        {
                                            xtype: 'button',
                                            id: 'a_search',
                                            icon: 'Htmls/images/search.png',
                                            text: 'Apply',
                                            listeners: {
                                                click: {
                                                    fn: me.onA_searchClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'tbseparator'
                                        },
                                        {
                                            xtype: 'button',
                                            id: 'a_reset',
                                            icon: 'Htmls/images/undo.png',
                                            text: 'Reset',
                                            listeners: {
                                                click: {
                                                    fn: me.onA_resetClick,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'container',
                                    dock: 'top',
                                    height: 600,
                                    id: 'alertFilters',
                                    layout: 'absolute',
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            x: 10,
                                            y: 10,
                                            id: 'a_startDate',
                                            width: 210,
                                            fieldLabel: 'From',
                                            labelSeparator: ' ',
                                            labelWidth: 70,
                                            emptyText: 'Choose Date',
                                            editable: false,
                                            format: 'd/m/y',
                                            listeners: {
                                                change: {
                                                    fn: me.onI_startDateChange1,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'timefield',
                                            x: 230,
                                            y: 10,
                                            id: 'a_fromHour',
                                            width: 90,
                                            fieldLabel: '',
                                            value: '0:00',
                                            editable: false,
                                            format: 'G:i',
                                            listeners: {
                                                change: {
                                                    fn: me.onI_fromHourChange1,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'datefield',
                                            x: 10,
                                            y: 40,
                                            id: 'a_endDate',
                                            width: 210,
                                            fieldLabel: 'To',
                                            labelSeparator: ' ',
                                            labelWidth: 70,
                                            emptyText: 'Choose Date',
                                            editable: false,
                                            format: 'd/m/y',
                                            listeners: {
                                                change: {
                                                    fn: me.onI_endDateChange1,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'timefield',
                                            x: 230,
                                            y: 40,
                                            id: 'a_toHour',
                                            width: 90,
                                            fieldLabel: '',
                                            value: '23:59',
                                            editable: false,
                                            format: 'G:i ',
                                            listeners: {
                                                change: {
                                                    fn: me.onI_toHourChange1,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridpanel',
                                            x: 0,
                                            y: 240,
                                            height: 360,
                                            id: 'a_filter_ip',
                                            title: 'IP Filter',
                                            enableColumnHide: false,
                                            enableColumnMove: false,
                                            enableColumnResize: false,
                                            store: 'alerts_ips',
                                            columns: [
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'IP',
                                                    text: 'IP Address',
                                                    flex: 1
                                                }
                                            ],
                                            selModel: Ext.create('Ext.selection.CheckboxModel', {

                                            })
                                        }
                                    ]
                                }
                            ],
                            items: [
                                {
                                    xtype: 'container',
                                    height: 351,
                                    layout: 'fit',
                                    items: [
                                        {
                                            xtype: 'treepanel',
                                            id: 'a_filter_rule',
                                            title: 'Rule Filter',
                                            store: 'a_rulesStore',
                                            selModel: Ext.create('Ext.selection.RowModel', {
                                                allowDeselect: true,
                                                mode: 'MULTI'
                                            }),
                                            viewConfig: {
                                                id: 'AlertsRuleFilter'
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    items: [
                        me.processA_alertsTable({
                            xtype: 'gridpanel',
                            id: 'a_alertsTable',
                            collapsed: false,
                            manageHeight: false,
                            enableColumnHide: false,
                            enableColumnMove: false,
                            forceFit: true,
                            store: 'alerts',
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return '<input type="checkbox" class="alerts-checkbox" rel="' + record.data.td0 + '">';

                                    },
                                    autoRender: true,
                                    autoShow: true,
                                    draggable: false,
                                    id: 'alerts-checkbox',
                                    maxWidth: 33,
                                    minWidth: 33,
                                    width: 33,
                                    resizable: false,
                                    sortable: false,
                                    text: '<input type="checkbox" class="alerts-checkbox-column">'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if(!SIDS[record.data.td2]) {
                                            SIDS[record.data.td2] = Object.keys(SIDS).length;
                                        }
                                        return Object.keys(SIDS).indexOf(record.data.td2);
                                    },
                                    maxWidth: 50,
                                    width: 50,
                                    defaultWidth: 50,
                                    dataIndex: 'td2',
                                    tdCls: 'td-SID',
                                    text: 'SID',
                                    editor: {
                                        xtype: 'textfield',
                                        allowBlank: false
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return date_format('d/m/y H:i:s', value);
                                    },
                                    maxWidth: 110,
                                    dataIndex: 'td1',
                                    text: 'Time'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    maxWidth: 50,
                                    defaultWidth: 50,
                                    dataIndex: 'td7',
                                    text: 'Score'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    maxWidth: 100,
                                    width: 100,
                                    dataIndex: 'td4',
                                    text: 'IP',
                                    editor: {
                                        xtype: 'textfield',
                                        allowBlank: false
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return '<div><span class="flag flag-' + record.data['td9'].toLowerCase() + '"></span>&nbsp;&nbsp;'
                                        + aliasToName[record.data['td9']] + (record.data['td10'] != 'Unknown' ? ', ' + record.data['td10'] : '') + '</div>';
                                    },
                                    dataIndex: 'td9',
                                    text: 'Location'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'td5',
                                    text: 'Rule Group',
                                    editor: {
                                        xtype: 'textfield',
                                        allowBlank: false
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    hidden: true,
                                    dataIndex: 'td0',
                                    text: 'Alert ID'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    hidden: true,
                                    dataIndex: 'td3',
                                    text: 'User',
                                    editor: {
                                        xtype: 'textfield',
                                        allowBlank: false
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    hidden: true,
                                    dataIndex: 'td6',
                                    text: 'Description',
                                    editor: {
                                        xtype: 'textfield',
                                        allowBlank: false
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    maxWidth: 70,
                                    dataIndex: 'td8',
                                    text: 'Aggregate'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    hidden: true,
                                    dataIndex: 'td10',
                                    text: 'City'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (value=="None" || !value)
                                        return '<div>n/a</div>';
                                        else
                                        return value;
                                    },
                                    dataIndex: 'td11',
                                    text: 'Domain'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        var vals = value
                                        if (vals.length){
                                            return "<div align=\"left\" onmouseover=\"hovered_alert_params("+rowIndex+","+colIndex+")\">"+vals[0]['par']+"...</div>"
                                        }
                                        else
                                        return ""

                                    },
                                    hidden: true,
                                    id: 'a_par_name_col',
                                    minWidth: 150,
                                    width: 150,
                                    dataIndex: 'td13',
                                    text: 'Name',
                                    listeners: {
                                        resize: {
                                            fn: me.onA_par_name_colResize,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    hidden: true,
                                    dataIndex: 'td12',
                                    text: 'Rule Group ID'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        var vals = value
                                        if (vals.length){
                                            return "<div align=\"left\" onmouseover=\"hovered_alert_params("+rowIndex+","+colIndex+")\">"+vals[0]['par']+"</div>"
                                        }
                                        else
                                        return ""

                                    },
                                    id: 'a_par_val_col',
                                    minWidth: 150,
                                    width: 150,
                                    dataIndex: 'td13',
                                    text: 'Parameters',
                                    listeners: {
                                        resize: {
                                            fn: me.onA_par_val_colResize,
                                            scope: me
                                        }
                                    }
                                }
                            ],
                            dockedItems: [
                                {
                                    xtype: 'toolbar',
                                    dock: 'top',
                                    width: 541,
                                    items: [
                                        {
                                            xtype: 'button',
                                            id: 'alerts-remove',
                                            iconCls: 'icon-remove',
                                            text: 'Delete Selected',
                                            listeners: {
                                                click: {
                                                    fn: me.alertsDeleteClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'tbseparator'
                                        },
                                        {
                                            xtype: 'button',
                                            id: 'a_flowButton',
                                            icon: 'Htmls/images/flow.png',
                                            text: 'Show  Session Flow',
                                            listeners: {
                                                click: {
                                                    fn: me.onA_flowButtonClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'tbseparator'
                                        },
                                        {
                                            xtype: 'pagingtoolbar',
                                            border: 'none',
                                            id: 'a_alerts_paging',
                                            width: 598,
                                            displayInfo: true,
                                            store: 'alerts',
                                            items: [
                                                {
                                                    xtype: 'tbseparator'
                                                },
                                                {
                                                    xtype: 'checkboxfield',
                                                    id: 'a_refresh_checkbox',
                                                    labelPad: 1,
                                                    labelStyle: '',
                                                    boxLabel: '',
                                                    checked: true,
                                                    listeners: {
                                                        change: {
                                                            fn: me.onA_refresh_checkboxChange,
                                                            scope: me
                                                        }
                                                    }
                                                },
                                                {
                                                    xtype: 'fieldcontainer',
                                                    id: 'a_refreshRate_panel',
                                                    width: 178,
                                                    layout: 'column',
                                                    fieldLabel: '',
                                                    items: [
                                                        {
                                                            xtype: 'combobox',
                                                            id: 'a_refreshRate',
                                                            style: 'margin-left:5px;\nmargin-top:3px',
                                                            width: 165,
                                                            fieldLabel: 'Auto-refresh (Mins)',
                                                            labelSeparator: ' ',
                                                            value: 1,
                                                            displayField: 'val',
                                                            queryMode: 'local',
                                                            store: 'd_refreshStore',
                                                            listeners: {
                                                                change: {
                                                                    fn: me.onA_refreshRateChange,
                                                                    scope: me
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            ],
                                            listeners: {
                                                beforechange: {
                                                    fn: me.onA_alerts_pagingBeforeChange,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                }
                            ],
                            selModel: Ext.create('Ext.selection.CellModel', {
                                listeners: {
                                    select: {
                                        fn: me.onCellselectionmodelSelect2,
                                        scope: me
                                    }
                                }
                            }),
                            listeners: {
                                select: {
                                    fn: me.onA_alertsTableSelect,
                                    scope: me
                                },
                                collapse: {
                                    fn: me.onA_alertsTableCollapse,
                                    scope: me
                                },
                                expand: {
                                    fn: me.onA_alertsTableExpand,
                                    scope: me
                                },
                                itemcontextmenu: {
                                    fn: me.onA_alertsTableItemContextMenu,
                                    scope: me
                                },
                                sortchange: {
                                    fn: me.onA_alertsTableSortChange,
                                    scope: me
                                },
                                render: {
                                    fn: me.onA_alertsTableRender,
                                    scope: me
                                }
                            }
                        })
                    ]
                }
            ],
            dockedItems: [
                {
                    xtype: 'panel',
                    dock: 'bottom',
                    height: 500,
                    id: 'a_sessionDetails',
                    maxHeight: 500,
                    padding: '',
                    collapseDirection: 'bottom',
                    collapsed: true,
                    collapsible: true,
                    title: 'Session Flow'
                }
            ]
        });

        me.callParent(arguments);
    },

    processA_alertsTable: function(config) {
        if(!config.viewConfig) {
            config.viewConfig = {};
        }

        config.viewConfig.getRowClass = function (record) {
            if(!SIDS[record.data.td2]) {
                SIDS[record.data.td2] = Object.keys(SIDS).length;
            }
            return 'sid-color-' + (Object.keys(SIDS).indexOf(record.data.td2) % 10);
        }

        return config;
    },

    onA_searchClick: function(button, e, eOpts) {
        telepath.alerts.filter.apply();
    },

    onA_resetClick: function(button, e, eOpts) {
        telepath.alerts.filter.reset();
    },

    onI_startDateChange1: function(field, newValue, oldValue, eOpts) {
        telepath.alerts.changeFilter(field, newValue, oldValue, eOpts);
    },

    onI_fromHourChange1: function(field, newValue, oldValue, eOpts) {
        telepath.alerts.changeFilter(field, newValue, oldValue, eOpts);
    },

    onI_endDateChange1: function(field, newValue, oldValue, eOpts) {
        telepath.alerts.changeFilter(field, newValue, oldValue, eOpts);
    },

    onI_toHourChange1: function(field, newValue, oldValue, eOpts) {
        telepath.alerts.changeFilter(field, newValue, oldValue, eOpts);
    },

    onA_par_name_colResize: function(component, width, height, oldWidth, oldHeight, eOpts) {
        resize_alert_params_window()
    },

    onA_par_val_colResize: function(component, width, height, oldWidth, oldHeight, eOpts) {
        resize_alert_params_window()
    },

    alertsDeleteClick: function(button, e, eOpts) {
        telepath.alerts.deleteSelected();
    },

    onA_flowButtonClick: function(button, e, eOpts) {
        if (a_selected_row!=undefined){
            Ext.getCmp('a_sessionDetails').expand();
            select_row(a_selected_row);
        }
    },

    onA_alerts_pagingBeforeChange: function(pagingtoolbar, page, eOpts) {
        return telepath.alerts.pagingBeforeChange(pagingtoolbar, page, eOpts);
    },

    onA_refresh_checkboxChange: function(field, newValue, oldValue, eOpts) {
        if (newValue){
            Ext.getCmp('a_refreshRate_panel').enable();
            start_alerts_refresh(Ext.getCmp('a_refreshRate').getValue());
        }
        else{
            Ext.getCmp('a_refreshRate_panel').disable();
            stop_alerts_refresh();
        }
    },

    onA_refreshRateChange: function(field, newValue, oldValue, eOpts) {
        stop_alerts_refresh();
        start_alerts_refresh(newValue);
    },

    onCellselectionmodelSelect2: function(cellmodel, record, row, column, eOpts) {
        alerts_cell_num = column;
        setTimeout(function () {
        	alerts_selected_index = cellmodel.selection.columnHeader.dataIndex;
        }, 50);
    },

    onA_alertsTableSelect: function(rowmodel, record, index, eOpts) {
        a_selected_row = record;
    },

    onA_alertsTableCollapse: function(p, eOpts) {
        if(a_selected_row!=undefined){
            draw_session_flow();
        }
    },

    onA_alertsTableExpand: function(p, eOpts) {
        if(a_selected_row!=undefined){
            draw_session_flow();
        }
    },

    onA_alertsTableItemContextMenu: function(dataview, record, item, index, e, eOpts) {
        show_alerts_menu(dataview,record,item,index,e,eOpts)

    },

    onA_alertsTableSortChange: function(ct, column, direction, eOpts) {
        if (a_prevField == column.dataIndex && a_prevOrder ==direction)
        return;
        a_prevField = column.dataIndex;
        a_prevOrder = direction;
        get_alerts(currType,currVal);

    },

    onA_alertsTableRender: function(component, eOpts) {
        create_params_table()
    }

});